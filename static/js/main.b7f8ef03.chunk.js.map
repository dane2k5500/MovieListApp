{"version":3,"sources":["pages/Search.js","pages/Result.js","pages/Results.js","pages/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","e","target","value","prevState","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAgBeA,MAdf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC3B,OACI,6BAASC,UAAU,uBACf,2BACAC,KAAK,OACLC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,M,gBCCTM,MATf,YAAyC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACvB,OACG,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACpD,yBAAKC,IAAKJ,EAAOK,OAAQC,IAAI,KAC7B,4BAAKN,EAAOO,SCORC,MAVf,YAA2C,IAAvBC,EAAsB,EAAtBA,QAASR,EAAa,EAAbA,UACzB,OACI,6BAASP,UAAU,WACde,EAAQC,KAAK,SAAAV,GAAM,OAChB,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCaxDW,MAlBf,YAA2C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACxB,OACG,6BAASpB,UAAU,SACf,yBAAKA,UAAU,WACX,4BAAKmB,EAASN,MAAd,IAAqB,kCAASM,EAASE,KAAlB,MACpB,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YACxC,yBAAKtB,UAAU,QACX,yBAAKU,IAAKS,EAASR,OAAQC,IAAI,KAC/B,2BAAIO,EAASI,OAEjB,6BACI,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,aCwDLI,MA9Df,WAAgB,IAAD,EAEaC,mBAAU,CAClCC,EAAG,GACHX,QAAS,GACTI,SAAU,KALC,mBAENQ,EAFM,KAECC,EAFD,KAQPC,EAAS,4CAuCf,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAChB,8CAEF,8BACE,kBAAC,EAAD,CAAQF,YA/BM,SAACgC,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBJ,GAAS,SAAAK,GACP,sBAAUA,EAAV,CAAqBP,EAAGA,QA2BY3B,OA3CzB,SAAC+B,GACA,UAAVA,EAAEb,KACJiB,IAAML,EAAS,MAAQF,EAAMD,GAAGS,MAAK,YAAe,IAC9CpB,EAD6C,EAAXqB,KACnBvC,OAEnB+B,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBlB,QAASA,aAsClC,kBAAC,EAAD,CAASA,QAASY,EAAMZ,QAASR,UAxBrB,SAAA8B,GAChBH,IAAML,EAAS,MAAQQ,GAAIF,MAAK,YAAe,IAEzC7B,EAFwC,EAAX8B,KAIjCR,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBd,SAAUb,aAoBA,oBAAxBqB,EAAMR,SAASN,OAAwB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WAfpE,WACjBQ,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBd,SAAU,cCtCnBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.b7f8ef03.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search ({handleInput, search} ) {\r\n    return (\r\n        <section className=\"searchBox-container\">\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Search for a movie...\" \r\n            className=\"searchBox\"\r\n            onChange={handleInput}\r\n            onKeyPress={search}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nfunction Result ({ result, openPopup }) {\r\n    return (\r\n       <div className=\"result\" onClick={() => openPopup(result.imdbID)}>\r\n           <img src={result.Poster} alt=\"\"/>\r\n           <h3>{result.Title}</h3>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport Result from './Result';\r\n\r\nfunction Results ({ results, openPopup }) {\r\n    return (\r\n        <section className=\"results\">\r\n            {results.map( result => (\r\n                <Result key={result.imdbID} result={result} openPopup={openPopup}/>\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react';\r\n\r\nfunction Popup ({ selected, closePopup }) {\r\n    return (\r\n       <section className=\"popup\">\r\n           <div className=\"content\">\r\n               <h2>{selected.Title} <span>({ selected.Year })</span></h2>\r\n                <p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n                <div className=\"plot\">\r\n                    <img src={selected.Poster} alt=\"\" />\r\n                    <p>{selected.Plot}</p>\r\n                </div>\r\n                <div>\r\n                    <button className=\"close\" onClick={closePopup}>Close</button>\r\n                </div> \r\n           </div>\r\n       </section>\r\n    )\r\n}\r\n\r\nexport default Popup;","import React, { useState } from 'react';\nimport Search from './pages/Search';\nimport axios from 'axios';\nimport Results from './pages/Results';\nimport Popup from './pages/Popup';\n\n\nfunction App() {\n\n  const [state, setState] = useState ({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n\n  const apiurl = \"https://www.omdbapi.com/?apikey=9231b52a&\";\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n        let results = data.Search;\n\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      })\n    }\n  }\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return{...prevState, s: s}\n    });\n  }\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n\n      let result = data;\n\n      setState(prevState => {\n        return { ...prevState, selected: result}\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Search Movies</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search}/>\n        <Results results={state.results} openPopup={openPopup}/>\n\n        {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}